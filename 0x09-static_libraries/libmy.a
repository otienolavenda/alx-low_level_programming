!<arch>
0-isupper.c/    0           0     0     644     189       `
#include "main.h"
/**
 * _isupper - checkes upper case
 * @c: print int
 * Return: give 1 or 0
 */

int _isupper(int c)
{
if (c >= 'A' && c <= 'Z')
{
return (1);
}

else
{
return (0);
}

}

0-memset.c/     0           0     0     644     308       `
#include "main.h"
/**
 * _memset - fills memory with a constant byte.
 * @s: source string
 * @b: the contant byte for filling
 * @n: lenght of buffer
 * Return: new string.
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i = 0;

	while (i < n)
	{
		*(s + i) = b;
		i++;
	}
	return (s);
}
0-strcat.c/     0           0     0     644     446       `
#include "main.h"

/**
 *_strcat - concatenates  the string pointed to by @src to
 * the end of the string pointed to by @dest
 *@dest: String that will be appended
 *@src: String to be concatenated upon
 *
 * Return: returns poiner to @dest
 */

char *_strcat(char *dest, char *src)
{

	int index = 0, dest_len = 0;

	while (dest[index++])
		dest_len++;

	for (index = 0; src[index]; index++)
		dest[dest_len++] = src[index];

	return (dest);
}
100-atoi.c/     0           0     0     644     469       `
#include "main.h"
/**
* _atoi - Convert string to an integer.
* @s: Pointer to a character string.
*
* Return: void.
*/

int _atoi(char *s)
{
	int sign;
	unsigned int num;
	char *temp;

	temp = s;
	num = 0;
	sign = 1;
	while (*temp != '\0' && (*temp < '0' || *temp > '9'))
	{
		if (*temp == '-')
			sign *= -1;
		temp++;
	}
	if (*temp != '\0')
	{
		do {
			num = num * 10 + (*temp - '0');
			temp++;
		} while (*temp >= '0' && *temp <= '9');
	}
	return (num * sign);
}

1-isdigit.c/    0           0     0     644     243       `
#include "main.h"
/**
*_isdigit - function that verifies if a  character is a digit or not
*@c: tested character
*Return: returns 1 if it is uppercase , 0 if not
*/

int _isdigit(int c)
{
if ((c >= 48) && (c <= 57))
return (1);

return (0);
}

1-memcpy.c/     0           0     0     644     323       `
#include "main.h"
/**
 * _memcpy - fills memory with another buffer.
 * @dest: source string
 * @src: string for filling
 * @n: lenght of buffer
 * Return: new string.
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i = 0;

	while (i < n)
	{
		*(dest + i) = *(src + i);
		i++;
	}
	return (dest);
}

1-strncat.c/    0           0     0     644     485       `
#include "main.h"
/**
 *_strncat - concatenate two strings but add inputted number of bytes
 *@dest: string to be appended upon
 *@src: string to be completed at end of dest
 *@n:integer parameter to compare index to
 *Return: returns new concatenated string
 */

char *_strncat(char *dest, char *src, int n)
{

	int index = 0, dest_len = 0;

	while (dest[index++])
		dest_len++;

	for (index = 0; src[index] && index < n; index++)
		dest[dest_len++] = src[index];

	return (dest);

}

2-strchr.c/     0           0     0     644     316       `
#include "main.h"

/**
 * _strchr - locate character `c' in string `s'
 * @s: string to search
 * @c: character to search for
 *
 * Return: if `c' found, pointer to `s'; else, NULL
 */
char *_strchr(char *s, char c)
{
	while (*s)
	{
		if (*s == c)
			return (s);
		++s;
	}
	if (*s == c)
		return (s);
	return (0);
}
2-strlen.c/     0           0     0     644     213       `

#include "main.h"

/**
 * _strlen - return length of string 's'
 * @s: string to check
 *
 * Return: length of 's'
 */
int _strlen(char *s)
{
	int len;

	for (len = 0; *(s++) != '\0'; len++)
		;
	return (len);
}

2-strncpy.c/    0           0     0     644     362       `
#include "main.h"

/**
 * _strncpy - copy at most `n' characters from `src' into `dest'
 * @dest: destination string
 * @src: source string
 * @n: number of characters
 *
 * Return: pointer to dest
 */
char *_strncpy(char *dest, char *src, int n)
{
	int i = 0;

	while (n && (dest[i] = src[i]))
		++i, --n;
	while (n-- > 0)
		dest[i++] = '\0';
	return (dest);
}
3-islower.c/    0           0     0     644     241       `
#include "main.h"

/**
 * _islower - checks if argument is lowercase character
 * @c: character to check
 *
 * Return: 1 if c is lowercase, 0 otherwise
 */
int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
		return (1);
	else
		return (0);
}

3-puts.c/       0           0     0     644     174       `
#include "main.h"

/**
 * _puts - print string followed by new line
 * @str: string to print
 */
void _puts(char *str)
{
	while (*str)
		_putchar(*str++);
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     274       `
#include "main.h"
#include <string.h>

/**
 * _strcmp - compare char *s1 and char *s2
 * @s1:string to compare
 * @s2: string to compare
 *
 * Return:s1--s2
 */
int _strcmp(char *s1, char *s2)
{
	while (*s1 && *s2 && *s1 == *s2)
	{
		s1++;
		s2++;
	}
	return (*s1 - *s2);
}
3-strspn.c/     0           0     0     644     511       `
#include "main.h"
#include <string.h>

/**
 * _strspn - get prefix bytes from `s' consisting of characters from `accept'
 * @s: string to check
 * @accept: characters to check for
 *
 * Return: number of bytes from `s' made only from `accept' characters
 */
unsigned int _strspn(char *s, char *accept)
{
	int i, j;
	unsigned int n = 0;

	for (i = 0; s[i]; ++i)
	{
		for (j = 0; accept[j]; ++j)
		{
			if (s[i] == accept[j])
			{
				++n;
				break;
			}
		}
		if (!(accept[j]))
			return (n);
	}
	return (n);
}

4-isalpha.c/    0           0     0     644     283       `
#include "main.h"

/**
 * _isalpha - checks if character is alphabetic
 * @c: character to check
 *
 * Return: 1 if character is letter (upper or lower), 0 otherwise
 */
int _isalpha(int c)
{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
		return (1);
	else
		return (0);
}

4-strpbrk.c/    0           0     0     644     413       `
#include "main.h"

/**
 * _strpbrk - locate first occurence of characters from `accept' in `s'
 * @s: string to search
 * @accept: characters to search for
 *
 * Return: pointer to first byte from `s' matching `accept', or NULL
 */
char *_strpbrk(char *s, char *accept)
{
	int i, j;

	for (i = 0; s[i]; ++i)
	{
		for (j = 0; accept[j]; ++j)
		{
			if (s[i] == accept[j])
				return (s + i);
		}
	}
	return (0);
}

5-strstr.c/     0           0     0     644     471       `
#include "main.h"

/**
 * _strstr - locate first occurrence of `needle' in `haystack'
 * @haystack: string to search
 * @needle: string to search for
 *
 * Return: pointer to beginning of substring, or NULL if not found
 */
char *_strstr(char *haystack, char *needle)
{
	int i, j;

	for (i = 0; haystack[i]; ++i)
	{
		for (j = 0; needle[j]; ++j)
		{
			if (haystack[i + j] != needle[j])
				break;
		}
		if (needle[j] == '\0')
			return (haystack + i);
	}
	return (0);
}

6-abs.c/        0           0     0     644     206       `
#include "main.h"

/**
 * _abs - compute absolute value of integer
 * @n: number to check
 *
 * Return: absolute value of integer
 */
int _abs(int n)
{
	if (n >= 0)
		return (n);
	else
		return (-1 * n);
}
9-strcpy.c/     0           0     0     644     325       `
#include "main.h"

/**
 * _strcpy - Copiar el contenido de uno a otra variable
 * @dest: This is destiny
 * @src: This is the copia
 *
 * Return: This return copy
 */
char *_strcpy(char *dest, char *src)
{
	char *start = dest;

	while (*src != '\0')
	{
		*dest = *src;
		dest++;
		src++;
	}
	*dest = '\0';
	return (start);
}

main.c/         0           0     0     644     148       `
#include "main.h"

int main(void)
{
    _puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
    return (0);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

